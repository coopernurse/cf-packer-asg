#
#  cf-packer-asg CloudFormation template
#
#  resources:
#     * CodeBuild Project
#     * ECR
#     * ELB (ALB)
#     * AutoScaleGroup
#
#

Description: PoC of using CodeBuild with packer to create AMIs that are deployed to an ASG

Parameters:
  Subnets:
    Description: Subnets the ALB and EC2 instances should be deployed to
    Type: List<AWS::EC2::Subnet::Id>
  VPC:
    Description: VPC ID to deploy to
    Type: AWS::EC2::VPC::Id
  ClusterSize:
    Description: Target number of WebApp instances
    Type: Number
    Default: 1
  MaxClusterSize:
      Description: Max number of WebApp instances - allows us to overprovision during rolling deploys
      Type: Number
      Default: 2
  InstanceType:
    Description: Instance type for WebApp instances
    Type: String
    Default: t2.micro
  AMI:
    Description: AMI ID for WebApp instances
    Type: String
  SSHKeyName:
    Description: SSH key name to associate with WebApp instances
    Type: String
  AppVersion:
    Description: Version string to set as APP_VERSION env var that webapp returns from /
    Type: String
    Default: 1

Outputs:
  EcrArn:
    Value: !GetAtt EcrRepository.Arn
  WebAppDNSName:
    Value: !GetAtt WebAppLoadBalancer.DNSName

Resources:
  #
  # ELB
  #
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: poc-cf-packer-webapp-elb
      SecurityGroups:
        - !Ref WebAppLoadBalancerSecurityGroup
      Subnets: !Ref Subnets
      Type: application
  WebAppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: poc-cf-packer-webapp-targetgroup
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 5
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'

  #
  # AutoScaleGroup
  #
  WebAppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      TargetGroupARNs:
        - !Ref WebAppTargetGroup
      AvailabilityZones:
        Fn::GetAZs: ''
      LaunchConfigurationName:
        Ref: WebAppASGLaunchConfig
      DesiredCapacity: !Ref ClusterSize
      MaxSize: !Ref MaxClusterSize
      MinSize: !Ref ClusterSize
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '4'
        WaitOnResourceSignals: true
        PauseTime: PT10M
        # TODO: review this list
        SuspendProcesses:
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions

  WebAppASGLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref SSHKeyName
      ImageId: !Ref AMI
      SecurityGroups:
        - Ref: WebAppSecurityGroup
      InstanceType: !Ref InstanceType
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -xe
          echo "APP_VERSION=${AppVersion}" > /etc/webapp.env
          /opt/aws/bin/cfn-signal -e $? -r "Setup complete" --region ${AWS::Region} --stack ${AWS::StackName} --resource WebAppASG

  #
  # Security Groups
  #
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for WebApp EC2 Instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  WebAppLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  #
  # ECR Repo
  #
  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: poc-cf-packer-asg

  #
  # CodeBuild
  #
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPOSITORY
            Value: !Ref EcrRepository
          - Name: AWS_ACCOUNT_ID
            Value: !Ref "AWS::AccountId"
      Source:
        Type: GITHUB
        Location: https://github.com/coopernurse/cf-packer-asg.git
      Triggers:
        Webhook: true
      TimeoutInMinutes: 15

  #
  # IAM
  #
  CodeBuildPackerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref CodeBuildRole
      InstanceProfileName: CodeBuildPackerInstanceProfile
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: ["codebuild.amazonaws.com", "ec2.amazonaws.com"]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:*'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:DescribeNetworkInterfaces'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DescribeSubnets'
                - 'ec2:DescribeSecurityGroups'
                - 'ec2:DescribeDhcpOptions'
                - 'ec2:DescribeVpcs'
                - 'ec2:CreateNetworkInterfacePermission'
                - 'ec2:AttachVolume'
                - 'ec2:AuthorizeSecurityGroupIngress'
                - 'ec2:RevokeSecurityGroupIngress'
                - 'ec2:CopyImage'
                - 'ec2:CreateImage'
                - 'ec2:CreateKeypair'
                - 'ec2:CreateSecurityGroup'
                - 'ec2:CreateSnapshot'
                - 'ec2:CreateTags'
                - 'ec2:CreateVolume'
                - 'ec2:DeleteKeypair'
                - 'ec2:DeleteSecurityGroup'
                - 'ec2:DeleteSnapshot'
                - 'ec2:DeleteVolume'
                - 'ec2:DeregisterImage'
                - 'ec2:DescribeImageAttribute'
                - 'ec2:DescribeImages'
                - 'ec2:DescribeInstances'
                - 'ec2:DescribeRegions'
                - 'ec2:DescribeSnapshots'
                - 'ec2:DescribeTags'
                - 'ec2:DescribeVolumes'
                - 'ec2:DetachVolume'
                - 'ec2:GetPasswordData'
                - 'ec2:ModifyImageAttribute'
                - 'ec2:ModifyInstanceAttribute'
                - 'ec2:ModifySnapshotAttribute'
                - 'ec2:RegisterImage'
                - 'ec2:RunInstances'
                - 'ec2:StartInstances'
                - 'ec2:StopInstances'
                - 'ec2:RebootInstances'
                - 'ec2:TerminateInstances'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:CompleteLayerUpload'
                - 'ecr:GetAuthorizationToken'
                - 'ecr:InitiateLayerUpload'
                - 'ecr:PutImage'
                - 'ecr:UploadLayerPart'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:GetRepositoryPolicy'
                - 'ecr:DescribeRepositories'
                - 'ecr:ListImages'
                - 'ecr:DescribeImages'
                - 'ecr:BatchGetImage'
                # required to allow packer to use iam_instance_profile
                - 'iam:PassRole'
                Effect: Allow
                Resource: '*'
